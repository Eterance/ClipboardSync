@page "/testhubauth"
@using Microsoft.AspNetCore.Components.Forms
@using ClipboardSync.BlazorServer.Models;
@using ClipboardSync.Common.Models;
@using Microsoft.AspNetCore.SignalR.Client;
@using ClipboardSync.Common.Services
@using System.Text.Json
@using System.Net.Http.Headers;
@using ClipboardSync.Common.Exceptions;
@inject NavigationManager Navigation
@inject IConfiguration Config
@inject AuthenticationService _authService

<body>
    @if (_isAuth == false)
    {
        <h1>@ErrorMessage</h1>
    }
    else
    {
        <h1>@SuccessMsg</h1>
    }
</body>


@code {
    private bool _isAuth { get; set; } = false;
    private string? ErrorMessage { get; set; } = "请稍候…… 1";
    private string? SuccessMsg { get; set; } = "你有权访问该Hub。";
    protected HubConnection? _connection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _authService.ServerUrl = (Navigation.ToAbsoluteUri("")).ToString();
            try
            {
                string accessToken = await _authService.GetAccessTokenAsync();
                var url = $"{_authService.ServerUrl}TestAuthHub";
                _connection = new HubConnectionBuilder()
                    .WithUrl(url, options =>
                    {
                        options.AccessTokenProvider = () => Task.FromResult(accessToken);
                    })
                    .WithAutomaticReconnect()
                    .Build();
                try
                {
                    await _connection.StartAsync();
                    var results = await _connection.InvokeAsync<string>("Test");
                    SuccessMsg = results;
                    _isAuth = true;
                }
                catch (Exception ex)
                {
                    _isAuth = false;
                    ErrorMessage = $"你无权访问该页面。请重新登陆。3 {ex}";
                }
            }
            catch (HttpRequestException hre)
            {
                _isAuth = false;
                ErrorMessage = "连接至服务器出错。";
            }
            catch (NeedLoginException nle)
            {
                _isAuth = false;
                ErrorMessage = "你无权访问该页面。请重新登陆。2";
            }
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}